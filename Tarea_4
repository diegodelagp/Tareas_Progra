{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOBBtnsv0/6Bw9pJWl9lDnc",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/diegodelagp/Tareas_Progra/blob/main/Tarea_4\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r7-qEtc3pvAx",
        "outputId": "6c7d5ccb-5b3d-4d69-93ae-6aec82484eb4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dame un número (o escribe 'end' para salir): 1\n",
            "Dame un número (o escribe 'end' para salir): 2\n",
            "Dame un número (o escribe 'end' para salir): 3\n",
            "Dame un número (o escribe 'end' para salir): 4\n",
            "Dame un número (o escribe 'end' para salir): 5\n",
            "Dame un número (o escribe 'end' para salir): 6\n",
            "Dame un número (o escribe 'end' para salir): end\n",
            "Este es tu promedio 3.50\n",
            "Orden normal 1\n",
            "Orden inverso 6\n",
            "Orden normal 2\n",
            "Orden inverso 5\n",
            "Orden normal 3\n",
            "Orden inverso 4\n",
            "Orden normal 4\n",
            "Orden inverso 3\n",
            "Orden normal 5\n",
            "Orden inverso 2\n",
            "Orden normal 6\n",
            "Orden inverso 1\n",
            "[2, 4, 6] [1, 3, 5]\n",
            "La longitud de la lista 1 es: 3 y el de la Lista 2 es: 3\n",
            "[1, 4, 9, 16, 25, 36]\n"
          ]
        }
      ],
      "source": [
        "Lista = []\n",
        "while True: #siempre se estara corriendo el codigo, amenos que haya un break que lo rompa\n",
        "    f = input(\"Dame un número (o escribe 'end' para salir): \")\n",
        "    if f == \"end\": #si el usuario ecribe \"end\" acaba esa parte\n",
        "        break\n",
        "    Lista.append(int(f)) #añande el numero a la lista\n",
        "e = 0\n",
        "x = 0\n",
        "def prom(x,e,Lista): #funcion que suma los valores en una misma variable y los promedia\n",
        "  for i in Lista:\n",
        "    x = x + Lista[e]\n",
        "    e +=1\n",
        "  if e >= len(Lista):\n",
        "    x = x/len(Lista)\n",
        "    print(f\"Este es tu promedio {x:.2f}\")\n",
        "def indice(Lista,x,e): #da la lista en orden inverso. orden normal alternando entre esos modos\n",
        "  e = 0\n",
        "  x = 0\n",
        "  for f in Lista:\n",
        "    e = e - 1\n",
        "    print(f\"Orden normal {Lista[x]}\")\n",
        "    print(f\"Orden inverso {Lista[e]}\")\n",
        "    x += 1\n",
        "def p_i(Lista,x,e):\n",
        "  Lista2 = []\n",
        "  Lista3 = []\n",
        "  for i in Lista:\n",
        "    x = Lista[e]\n",
        "    if x %2 == 0: #revisa si el num es divisible entre 2 y si lo es lo añade a la lista 2\n",
        "        Lista2.append(x)\n",
        "        e += 1\n",
        "    else:\n",
        "        Lista3.append(x) #en caso de no serlo lo añade a la lista 3\n",
        "        e += 1\n",
        "  print(Lista2,Lista3)\n",
        "  print(f\"La longitud de la lista 1 es: {len(Lista2)} y el de la Lista 2 es: {len(Lista3)}\") #Da la longitud de ambas listas\n",
        "  print(list(map(lambda x: x**2, Lista)))\n",
        "\n",
        "prom(x,e,Lista)\n",
        "indice(Lista,x,e)\n",
        "p_i(Lista,x,e)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Lista_1 = []\n",
        "i = 0\n",
        "while True:\n",
        "    f = int(input(\"Dame un número para la lista 1 (o escribe '0' para salir): \")) #Valores para la lista 1\n",
        "    if f == 0: #siempre se estara corriendo el codigo, amenos que haya un el usuario ecriba 0\n",
        "        break\n",
        "    Lista_1.append(int(f)) #añade todo a la lista 1\n",
        "Lista_2 = []\n",
        "while True:\n",
        "    f = int(input(\"Dame un número para la lista 2 (o escribe '0' para salir): \")) #Valores para la lista 1\n",
        "    if f == 0: #siempre se estara corriendo el codigo, amenos que haya un el usuario ecriba 0\n",
        "        break\n",
        "    Lista_2.append(int(f)) #añade todo a la lista 2\n",
        "Ltotal = [Lista_1[i] + Lista_2[i] for i in range(f)] #suma todos los valores\n",
        "Lorden = sorted(Lista_1 + Lista_2) #lso ordena de mayor a menor\n",
        "Lunica = set(Lorden) #hace q no haya numeros repetidos\n",
        "\n",
        "print(Ltotal)\n",
        "print(Lorden)\n",
        "print(Lunica)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JJMbgXliEnro",
        "outputId": "1d7f67ff-cc11-49b9-82a3-3f26e59ac85a"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dame un número para la lista 1 (o escribe '0' para salir): 12\n",
            "Dame un número para la lista 1 (o escribe '0' para salir): 13\n",
            "Dame un número para la lista 1 (o escribe '0' para salir): 14\n",
            "Dame un número para la lista 1 (o escribe '0' para salir): 15\n",
            "Dame un número para la lista 1 (o escribe '0' para salir): 16\n",
            "Dame un número para la lista 1 (o escribe '0' para salir): 17\n",
            "Dame un número para la lista 1 (o escribe '0' para salir): 0\n",
            "Dame un número para la lista 2 (o escribe '0' para salir): 13\n",
            "Dame un número para la lista 2 (o escribe '0' para salir): 14\n",
            "Dame un número para la lista 2 (o escribe '0' para salir): 15\n",
            "Dame un número para la lista 2 (o escribe '0' para salir): 16\n",
            "Dame un número para la lista 2 (o escribe '0' para salir): 17\n",
            "Dame un número para la lista 2 (o escribe '0' para salir): 18\n",
            "Dame un número para la lista 2 (o escribe '0' para salir): 19\n",
            "Dame un número para la lista 2 (o escribe '0' para salir): 0\n",
            "[[12, 13, 14, 15, 16, 17, 13, 14, 15, 16, 17, 18, 19]]\n",
            "[12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 19]\n",
            "{12, 13, 14, 15, 16, 17, 18, 19}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def digitos_faltantes():\n",
        "    while True: #se repite hasta que se de un número válido entre 0 y 10\n",
        "        try:\n",
        "            t = int(input(\"Cantidad de dígitos (0-10): \"))\n",
        "            if 0 <= t <= 10:\n",
        "                break\n",
        "        except ValueError:\n",
        "            pass\n",
        "        print(\"Valor inválido. Intente de nuevo.\") #si no cumple pide otro valor\n",
        "\n",
        "    lista = []\n",
        "    for i in range(t): #pide los dígitos uno por uno\n",
        "        while True:\n",
        "            try:\n",
        "                d = int(input(f\"Dígito {i+1}: \"))\n",
        "                if 0 <= d <= 9: #solo acepta números del 0 al 9\n",
        "                    lista.append(d) #añade el número a la lista\n",
        "                    break\n",
        "            except ValueError:\n",
        "                pass\n",
        "            print(\"Valor inválido. Intente de nuevo.\") #si no cumple pide otro valor\n",
        "\n",
        "    faltantes = [str(x) for x in range(1, 10) if x not in lista] #hace una lista con los números del 1 al 9 que no estén en la lista\n",
        "\n",
        "    print(\" \".join(faltantes)) #muestra los que faltan separados por espacio\n",
        "\n",
        "\n",
        "def fibonacci_lista():\n",
        "    while True: #se repite hasta que se ponga un número válido\n",
        "        try:\n",
        "            n = int(input(\"Número de términos de Fibonacci (>=0): \"))\n",
        "            if n >= 0: #solo acepta valores mayores o iguales a 0\n",
        "                break\n",
        "        except ValueError:\n",
        "            pass\n",
        "        print(\"Valor inválido. Intente de nuevo.\") #si no cumple vuelve a pedir\n",
        "\n",
        "    fib = [] #lista vacía para los valores\n",
        "    a, b = 0, 1 #primeros valores de fibonacci\n",
        "    for _ in range(n):\n",
        "        fib.append(a) #añade el número actual\n",
        "        a, b = b, a + b #actualiza los valores\n",
        "    print(fib)\n",
        "\n",
        "\n",
        "def combinar_listas():\n",
        "    try:\n",
        "        a = int(input(\"Cantidad de elementos en L1: \"))\n",
        "        b = int(input(\"Cantidad de elementos en L2: \"))\n",
        "    except ValueError:\n",
        "        print(\"Error\") #si no son números da error\n",
        "        return\n",
        "\n",
        "    if a <= 0 or b <= 0: #no acepta números negativos o cero\n",
        "        print(\"Error\")\n",
        "        return\n",
        "\n",
        "    print(\"-----\")\n",
        "    L1 = [input(f\"L1[{i+1}]: \") for i in range(a)] #pide los elementos de la primera lista\n",
        "\n",
        "    print(\"-----\")\n",
        "    L2 = [input(f\"L2[{i+1}]: \") for i in range(b)] #pide los elementos de la segunda lista\n",
        "\n",
        "    print(\"-----\")\n",
        "\n",
        "    L3 = []\n",
        "    i, j = 0, 0\n",
        "    while i < a or j < b: #mientras haya elementos en cualquiera de las listas\n",
        "        if i < a:\n",
        "            L3.append(L1[i]) #añade un elemento de la primera lista\n",
        "            i += 1\n",
        "        if j < b:\n",
        "            L3.append(L2[j]) #añade un elemento de la segunda lista\n",
        "            j += 1\n",
        "\n",
        "    print(L1) #muestra lista 1\n",
        "    print(L2) #muestra lista 2\n",
        "    print(L3) #muestra lista combinada\n",
        "\n",
        "\n",
        "def main():\n",
        "    while True: #menu principal que se repite hasta salir\n",
        "        print(\"\\n--- MENÚ ---\")\n",
        "        print(\"1) Dígitos faltantes (1–9)\")\n",
        "        print(\"2) Fibonacci en lista\")\n",
        "        print(\"3) Combinar listas de strings\")\n",
        "        print(\"4) Salir\")\n",
        "\n",
        "        opcion = input(\"Elige una opción: \")\n",
        "\n",
        "        if opcion == \"1\": #Depndiendo del numero que ponga el usuario esa func se correra\n",
        "            digitos_faltantes()\n",
        "        elif opcion == \"2\":\n",
        "            fibonacci_lista()\n",
        "        elif opcion == \"3\":\n",
        "            combinar_listas()\n",
        "        elif opcion == \"4\":\n",
        "            print(\"Saliendo del programa...\")\n",
        "            break\n",
        "        else:\n",
        "            print(\"Opción inválida.\") #si no coincide con ninguna opción\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\": #verifica que se ejecute directamente\n",
        "    main()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NcF5TpNBH2uB",
        "outputId": "25518bda-789a-414b-c8a5-d63b3e1e6e54"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- MENÚ ---\n",
            "1) Dígitos faltantes (1–9)\n",
            "2) Fibonacci en lista\n",
            "3) Combinar listas de strings\n",
            "4) Salir\n",
            "1 2 3 5 6 7 8 9\n",
            "\n",
            "--- MENÚ ---\n",
            "1) Dígitos faltantes (1–9)\n",
            "2) Fibonacci en lista\n",
            "3) Combinar listas de strings\n",
            "4) Salir\n",
            "[0, 1, 1, 2]\n",
            "\n",
            "--- MENÚ ---\n",
            "1) Dígitos faltantes (1–9)\n",
            "2) Fibonacci en lista\n",
            "3) Combinar listas de strings\n",
            "4) Salir\n",
            "-----\n",
            "-----\n",
            "-----\n",
            "['2']\n",
            "['4', '4']\n",
            "['2', '4', '4']\n",
            "\n",
            "--- MENÚ ---\n",
            "1) Dígitos faltantes (1–9)\n",
            "2) Fibonacci en lista\n",
            "3) Combinar listas de strings\n",
            "4) Salir\n",
            "Elige una opción: 4\n",
            "Saliendo del programa...\n"
          ]
        }
      ]
    }
  ]
}